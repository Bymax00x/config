#compdef svm

# ------------------------------------------------------------------------------
# Copyright (c) 2011 Tomohito Ozaki(yuroyoro).
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#  3. The name of the author may not be used to endorse or promote
#     products derived from this software without specific prior
#     written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# ------------------------------------------------------------------------------
# Description
# -----------
#
#  Completion script for svm (https://github.com/yuroyoro/svm)
#
# ------------------------------------------------------------------------------
# Authors
# -------
#
#  * Hideaki Miyake (https://github.com/mollifier)
#
# ------------------------------------------------------------------------------

local context curcontext="$curcontext" state line ret=1
typeset -A opt_args


local -a _1st_arguments
_1st_arguments=(
  'help:(-h)show this usage information'
  'current:(-c)show the currently use scala version'
  "list:(-l)show the scala version installed in svm_path(default is /home/mollifier/.svm)"
  "versions:(-v)show the abalabe scala version not installed"
  'install:(-i)install specific scala version'
  'remove:(-r|uninstall)uninstall specific scala version and remove their sources'
  'switch:(-s|-u|use)setup to use a specific scala version'
  'update-latest:install or update nightly build scala version'
  'latest:setup to use nightly build scala version'
  'stable:setup to use stable(x.x.x.final) scala version'
)

# TODO: complete command synonyms
_arguments -C \
  '(-)-h[show this usage information]' \
  '-c[show the currently use scala version]' \
  "-l[show the scala version installed in svm_path(default is ${HOME}/.svm)]" \
  '-v[show the abalabe scala version not installed]' \
  '-i[install specific scala version]: :_svm_completion_not_installed_scala_versions' \
  '-r[uninstall specific scala version and remove their sources]: :_svm_completion_installed_scala_versions' \
  ''{-s,-u}'[setup to use a specific scala version]: :_svm_completion_not_selected_scala_versions' \
  '1: :->cmds' \
  '*:: :->args' && ret=0


# installed scala versions
(( $+functions[_svm_completion_installed_scala_versions] )) ||
_svm_completion_installed_scala_versions() {
  local -a _svm_completion_cache_installed_versions
  _current_version="${$(_call_program installed svm current)#currently version is[[:space:]]*}"

  # collect lines starts with digit
  _svm_completion_cache_installed_versions=( ${(M)${(@f)"$(_call_program installed svm list)"}:#[[:digit:]]*} )

  _describe -t installed "installed versions" _svm_completion_cache_installed_versions
}

# installed and not selected scala versions
(( $+functions[_svm_completion_not_selected_scala_versions] )) ||
_svm_completion_not_selected_scala_versions() {
  local _current_version
  local -a _svm_completion_cache_installed_versions

  _current_version="${$(_call_program installed svm current)#currently version is[[:space:]]*}"

  # collect lines starts with digit
  _svm_completion_cache_installed_versions=( ${(M)${(@f)"$(_call_program installed svm list)"}:#[[:digit:]]*} )

  # remove current version
  _svm_completion_cache_installed_versions=( ${_svm_completion_cache_installed_versions:#$_current_version})
  _describe -t installed "installed versions" _svm_completion_cache_installed_versions
}

# not installed scala versions
(( $+functions[_svm_completion_not_installed_scala_versions] )) ||
_svm_completion_not_installed_scala_versions() {
  local -a _svm_completion_cache_not_installed_versions
  # collect lines starts with digit
  _svm_completion_cache_not_installed_versions=( ${(M)${(@f)"$(_call_program installed svm versions)"}:#[[:digit:]]*} )

  _describe -t notinstalled "not installed versions" _svm_completion_cache_not_installed_versions
}


case $state in
  cmds)
    # action
    _describe -t actions 'svm actions' _1st_arguments && ret=0
    _svm_completion_not_selected_scala_versions
    ;;

  args)
    # scala version number
    case $words[1] in
      install)
        # install not installed version
        _arguments \
          '1: :_svm_completion_not_installed_scala_versions' \
          '--docs[with install, update-latest download scala-devel-docs.]' \
          '--sources[with install, update-latest download scala-sources.]' \
        ;;

      remove|uninstall)
        # remove installed version
        _arguments \
          '1: :_svm_completion_installed_scala_versions'
        ;;

      switch|use)
        # use installed version
        _arguments \
          '1: :_svm_completion_not_selected_scala_versions'
        ;;

    esac

    ;;  # end args
esac

return ret

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et

